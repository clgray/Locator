#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cnit.Testor.Core.Server
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Locator")]
	public partial class DataClassesTestorCoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCoreMasterPart(CoreMasterPart instance);
    partial void UpdateCoreMasterPart(CoreMasterPart instance);
    partial void DeleteCoreMasterPart(CoreMasterPart instance);
    partial void InsertCoreRequirement(CoreRequirement instance);
    partial void UpdateCoreRequirement(CoreRequirement instance);
    partial void DeleteCoreRequirement(CoreRequirement instance);
    partial void InsertCoreBLOB(CoreBLOB instance);
    partial void UpdateCoreBLOB(CoreBLOB instance);
    partial void DeleteCoreBLOB(CoreBLOB instance);
    partial void InsertTestGroup(TestGroup instance);
    partial void UpdateTestGroup(TestGroup instance);
    partial void DeleteTestGroup(TestGroup instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertTestSessionQuestion(TestSessionQuestion instance);
    partial void UpdateTestSessionQuestion(TestSessionQuestion instance);
    partial void DeleteTestSessionQuestion(TestSessionQuestion instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertGroupTree(GroupTree instance);
    partial void UpdateGroupTree(GroupTree instance);
    partial void DeleteGroupTree(GroupTree instance);
    partial void InsertAnonymousUser(AnonymousUser instance);
    partial void UpdateAnonymousUser(AnonymousUser instance);
    partial void DeleteAnonymousUser(AnonymousUser instance);
    partial void InsertSystemSetting(SystemSetting instance);
    partial void UpdateSystemSetting(SystemSetting instance);
    partial void DeleteSystemSetting(SystemSetting instance);
    partial void InsertActivationKey(ActivationKey instance);
    partial void UpdateActivationKey(ActivationKey instance);
    partial void DeleteActivationKey(ActivationKey instance);
    partial void InsertCoreAnswer(CoreAnswer instance);
    partial void UpdateCoreAnswer(CoreAnswer instance);
    partial void DeleteCoreAnswer(CoreAnswer instance);
    partial void InsertCoreQuestion(CoreQuestion instance);
    partial void UpdateCoreQuestion(CoreQuestion instance);
    partial void DeleteCoreQuestion(CoreQuestion instance);
    partial void InsertCoreTest(CoreTest instance);
    partial void UpdateCoreTest(CoreTest instance);
    partial void DeleteCoreTest(CoreTest instance);
    partial void InsertTestSession(TestSession instance);
    partial void UpdateTestSession(TestSession instance);
    partial void DeleteTestSession(TestSession instance);
    partial void InsertSystemEventsLog(SystemEventsLog instance);
    partial void UpdateSystemEventsLog(SystemEventsLog instance);
    partial void DeleteSystemEventsLog(SystemEventsLog instance);
    #endregion
		
		public DataClassesTestorCoreDataContext() : 
				base(global::Cnit.Testor.Core.Server.Properties.Settings.Default.LocatorConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesTestorCoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesTestorCoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesTestorCoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesTestorCoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CoreMasterPart> CoreMasterParts
		{
			get
			{
				return this.GetTable<CoreMasterPart>();
			}
		}
		
		public System.Data.Linq.Table<CoreRequirement> CoreRequirements
		{
			get
			{
				return this.GetTable<CoreRequirement>();
			}
		}
		
		public System.Data.Linq.Table<CoreBLOB> CoreBLOBs
		{
			get
			{
				return this.GetTable<CoreBLOB>();
			}
		}
		
		public System.Data.Linq.Table<TestGroup> TestGroups
		{
			get
			{
				return this.GetTable<TestGroup>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<TestSessionQuestion> TestSessionQuestions
		{
			get
			{
				return this.GetTable<TestSessionQuestion>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<GroupTree> GroupTrees
		{
			get
			{
				return this.GetTable<GroupTree>();
			}
		}
		
		public System.Data.Linq.Table<AnonymousUser> AnonymousUsers
		{
			get
			{
				return this.GetTable<AnonymousUser>();
			}
		}
		
		public System.Data.Linq.Table<SystemSetting> SystemSettings
		{
			get
			{
				return this.GetTable<SystemSetting>();
			}
		}
		
		public System.Data.Linq.Table<ActivationKey> ActivationKeys
		{
			get
			{
				return this.GetTable<ActivationKey>();
			}
		}
		
		public System.Data.Linq.Table<CoreAnswer> CoreAnswers
		{
			get
			{
				return this.GetTable<CoreAnswer>();
			}
		}
		
		public System.Data.Linq.Table<CoreQuestion> CoreQuestions
		{
			get
			{
				return this.GetTable<CoreQuestion>();
			}
		}
		
		public System.Data.Linq.Table<CoreTest> CoreTests
		{
			get
			{
				return this.GetTable<CoreTest>();
			}
		}
		
		public System.Data.Linq.Table<TestSession> TestSessions
		{
			get
			{
				return this.GetTable<TestSession>();
			}
		}
		
		public System.Data.Linq.Table<SystemEventsLog> SystemEventsLogs
		{
			get
			{
				return this.GetTable<SystemEventsLog>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RemoveGroupTreeItem")]
		public int RemoveGroupTreeItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RemoveTestTreeItem")]
		public int RemoveTestTreeItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RenameGroupTreeItem")]
		public int RenameGroupTreeItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupNewName", DbType="VarChar(150)")] string groupNewName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, groupNewName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ReparentTestTreeItem")]
		public int ReparentTestTreeItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemNewParent", DbType="Int")] System.Nullable<int> itemNewParent)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, itemNewParent);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ReparentGroupTreeItem")]
		public int ReparentGroupTreeItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemNewParent", DbType="Int")] System.Nullable<int> itemNewParent)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, itemNewParent);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUserGroups")]
		public ISingleResult<GetUserGroupsResult> GetUserGroups([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<GetUserGroupsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddTestTreeItem")]
		public int AddTestTreeItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ParentId", DbType="Int")] System.Nullable<int> parentId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NodeType", DbType="TinyInt")] System.Nullable<byte> nodeType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TestId", DbType="Int")] System.Nullable<int> testId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemOwner", DbType="Int")] System.Nullable<int> itemOwner)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), parentId, nodeType, testId, itemOwner);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTestRequirements")]
		public ISingleResult<GetTestRequirementsResult> GetTestRequirements([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TestId", DbType="Int")] System.Nullable<int> testId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), testId);
			return ((ISingleResult<GetTestRequirementsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RenameTestTreeItem")]
		public int RenameTestTreeItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TestNewName", DbType="VarChar(150)")] string testNewName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, testNewName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTestItemOwner")]
		public int GetTestItemOwner([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTestOwner")]
		public int GetTestOwner([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddGroupTreeItem")]
		public int AddGroupTreeItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ParentId", DbType="Int")] System.Nullable<int> parentId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupName", DbType="VarChar(250)")] string groupName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupCode", DbType="VarChar(50)")] string groupCode)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), parentId, groupName, groupCode);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGroupIdByCode")]
		public int GetGroupIdByCode([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupCode", DbType="VarChar(50)")] string groupCode)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupCode);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUserGroupTree")]
		public ISingleResult<GetUserGroupTreeResult> GetUserGroupTree([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ParentId", DbType="Int")] System.Nullable<int> parentId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsAdmin", DbType="Bit")] System.Nullable<bool> isAdmin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Level", DbType="Int")] System.Nullable<int> level)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, parentId, isAdmin, level);
			return ((ISingleResult<GetUserGroupTreeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAppointedTests")]
		public ISingleResult<GetAppointedTestsResult> GetAppointedTests([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<GetAppointedTestsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTestTreeByLevel")]
		public ISingleResult<GetTestTreeByLevelResult> GetTestTreeByLevel([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ParentId", DbType="Int")] System.Nullable<int> parentId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Level", DbType="Int")] System.Nullable<int> level, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GetParents", DbType="Bit")] System.Nullable<bool> getParents, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GetOnlyActive", DbType="Bit")] System.Nullable<bool> getOnlyActive)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), parentId, level, getParents, getOnlyActive);
			return ((ISingleResult<GetTestTreeByLevelResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetTestTreeItemActivity")]
		public int SetTestTreeItemActivity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NodeId", DbType="Int")] System.Nullable<int> nodeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Activity", DbType="Bit")] System.Nullable<bool> activity)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nodeId, activity);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoreMasterParts")]
	public partial class CoreMasterPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MasterPartId;
		
		private int _MasterTestId;
		
		private int _PartTestId;
		
		private int _QuestionsNumber;
		
		private EntityRef<CoreTest> _CoreTest;
		
		private EntityRef<CoreTest> _CoreTest1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMasterPartIdChanging(int value);
    partial void OnMasterPartIdChanged();
    partial void OnMasterTestIdChanging(int value);
    partial void OnMasterTestIdChanged();
    partial void OnPartTestIdChanging(int value);
    partial void OnPartTestIdChanged();
    partial void OnQuestionsNumberChanging(int value);
    partial void OnQuestionsNumberChanged();
    #endregion
		
		public CoreMasterPart()
		{
			this._CoreTest = default(EntityRef<CoreTest>);
			this._CoreTest1 = default(EntityRef<CoreTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterPartId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MasterPartId
		{
			get
			{
				return this._MasterPartId;
			}
			set
			{
				if ((this._MasterPartId != value))
				{
					this.OnMasterPartIdChanging(value);
					this.SendPropertyChanging();
					this._MasterPartId = value;
					this.SendPropertyChanged("MasterPartId");
					this.OnMasterPartIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterTestId", DbType="Int NOT NULL")]
		public int MasterTestId
		{
			get
			{
				return this._MasterTestId;
			}
			set
			{
				if ((this._MasterTestId != value))
				{
					if (this._CoreTest1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMasterTestIdChanging(value);
					this.SendPropertyChanging();
					this._MasterTestId = value;
					this.SendPropertyChanged("MasterTestId");
					this.OnMasterTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartTestId", DbType="Int NOT NULL")]
		public int PartTestId
		{
			get
			{
				return this._PartTestId;
			}
			set
			{
				if ((this._PartTestId != value))
				{
					if (this._CoreTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartTestIdChanging(value);
					this.SendPropertyChanging();
					this._PartTestId = value;
					this.SendPropertyChanged("PartTestId");
					this.OnPartTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionsNumber", DbType="Int NOT NULL")]
		public int QuestionsNumber
		{
			get
			{
				return this._QuestionsNumber;
			}
			set
			{
				if ((this._QuestionsNumber != value))
				{
					this.OnQuestionsNumberChanging(value);
					this.SendPropertyChanging();
					this._QuestionsNumber = value;
					this.SendPropertyChanged("QuestionsNumber");
					this.OnQuestionsNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreMasterPart", Storage="_CoreTest", ThisKey="PartTestId", OtherKey="TestId", IsForeignKey=true)]
		public CoreTest CoreTest
		{
			get
			{
				return this._CoreTest.Entity;
			}
			set
			{
				CoreTest previousValue = this._CoreTest.Entity;
				if (((previousValue != value) 
							|| (this._CoreTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreTest.Entity = null;
						previousValue.CoreMasterParts.Remove(this);
					}
					this._CoreTest.Entity = value;
					if ((value != null))
					{
						value.CoreMasterParts.Add(this);
						this._PartTestId = value.TestId;
					}
					else
					{
						this._PartTestId = default(int);
					}
					this.SendPropertyChanged("CoreTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreMasterPart1", Storage="_CoreTest1", ThisKey="MasterTestId", OtherKey="TestId", IsForeignKey=true)]
		public CoreTest CoreTest1
		{
			get
			{
				return this._CoreTest1.Entity;
			}
			set
			{
				CoreTest previousValue = this._CoreTest1.Entity;
				if (((previousValue != value) 
							|| (this._CoreTest1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreTest1.Entity = null;
						previousValue.CoreMasterParts1.Remove(this);
					}
					this._CoreTest1.Entity = value;
					if ((value != null))
					{
						value.CoreMasterParts1.Add(this);
						this._MasterTestId = value.TestId;
					}
					else
					{
						this._MasterTestId = default(int);
					}
					this.SendPropertyChanged("CoreTest1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoreRequirements")]
	public partial class CoreRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequirementId;
		
		private int _TestId;
		
		private int _Requirement;
		
		private EntityRef<CoreTest> _CoreTest;
		
		private EntityRef<CoreTest> _CoreTest1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequirementIdChanging(int value);
    partial void OnRequirementIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnRequirementChanging(int value);
    partial void OnRequirementChanged();
    #endregion
		
		public CoreRequirement()
		{
			this._CoreTest = default(EntityRef<CoreTest>);
			this._CoreTest1 = default(EntityRef<CoreTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequirementId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequirementId
		{
			get
			{
				return this._RequirementId;
			}
			set
			{
				if ((this._RequirementId != value))
				{
					this.OnRequirementIdChanging(value);
					this.SendPropertyChanging();
					this._RequirementId = value;
					this.SendPropertyChanged("RequirementId");
					this.OnRequirementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL")]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._CoreTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Requirement", DbType="Int NOT NULL")]
		public int Requirement
		{
			get
			{
				return this._Requirement;
			}
			set
			{
				if ((this._Requirement != value))
				{
					if (this._CoreTest1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementChanging(value);
					this.SendPropertyChanging();
					this._Requirement = value;
					this.SendPropertyChanged("Requirement");
					this.OnRequirementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreRequirement", Storage="_CoreTest", ThisKey="TestId", OtherKey="TestId", IsForeignKey=true)]
		public CoreTest CoreTest
		{
			get
			{
				return this._CoreTest.Entity;
			}
			set
			{
				CoreTest previousValue = this._CoreTest.Entity;
				if (((previousValue != value) 
							|| (this._CoreTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreTest.Entity = null;
						previousValue.CoreRequirements.Remove(this);
					}
					this._CoreTest.Entity = value;
					if ((value != null))
					{
						value.CoreRequirements.Add(this);
						this._TestId = value.TestId;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("CoreTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreRequirement1", Storage="_CoreTest1", ThisKey="Requirement", OtherKey="TestId", IsForeignKey=true)]
		public CoreTest CoreTest1
		{
			get
			{
				return this._CoreTest1.Entity;
			}
			set
			{
				CoreTest previousValue = this._CoreTest1.Entity;
				if (((previousValue != value) 
							|| (this._CoreTest1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreTest1.Entity = null;
						previousValue.CoreRequirements1.Remove(this);
					}
					this._CoreTest1.Entity = value;
					if ((value != null))
					{
						value.CoreRequirements1.Add(this);
						this._Requirement = value.TestId;
					}
					else
					{
						this._Requirement = default(int);
					}
					this.SendPropertyChanged("CoreTest1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoreBLOBs")]
	public partial class CoreBLOB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BLOBId;
		
		private int _QuestionId;
		
		private System.Data.Linq.Binary _BLOBContent;
		
		private EntityRef<CoreQuestion> _CoreQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBLOBIdChanging(System.Guid value);
    partial void OnBLOBIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnBLOBContentChanging(System.Data.Linq.Binary value);
    partial void OnBLOBContentChanged();
    #endregion
		
		public CoreBLOB()
		{
			this._CoreQuestion = default(EntityRef<CoreQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BLOBId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BLOBId
		{
			get
			{
				return this._BLOBId;
			}
			set
			{
				if ((this._BLOBId != value))
				{
					this.OnBLOBIdChanging(value);
					this.SendPropertyChanging();
					this._BLOBId = value;
					this.SendPropertyChanged("BLOBId");
					this.OnBLOBIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._CoreQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BLOBContent", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary BLOBContent
		{
			get
			{
				return this._BLOBContent;
			}
			set
			{
				if ((this._BLOBContent != value))
				{
					this.OnBLOBContentChanging(value);
					this.SendPropertyChanging();
					this._BLOBContent = value;
					this.SendPropertyChanged("BLOBContent");
					this.OnBLOBContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreQuestion_CoreBLOB", Storage="_CoreQuestion", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public CoreQuestion CoreQuestion
		{
			get
			{
				return this._CoreQuestion.Entity;
			}
			set
			{
				CoreQuestion previousValue = this._CoreQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CoreQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreQuestion.Entity = null;
						previousValue.CoreBLOBs.Remove(this);
					}
					this._CoreQuestion.Entity = value;
					if ((value != null))
					{
						value.CoreBLOBs.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("CoreQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestGroups")]
	public partial class TestGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestGroupId;
		
		private int _TestId;
		
		private int _GroupId;
		
		private EntityRef<CoreTest> _CoreTest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestGroupIdChanging(int value);
    partial void OnTestGroupIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
		
		public TestGroup()
		{
			this._CoreTest = default(EntityRef<CoreTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestGroupId
		{
			get
			{
				return this._TestGroupId;
			}
			set
			{
				if ((this._TestGroupId != value))
				{
					this.OnTestGroupIdChanging(value);
					this.SendPropertyChanging();
					this._TestGroupId = value;
					this.SendPropertyChanged("TestGroupId");
					this.OnTestGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL")]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._CoreTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_TestGroup", Storage="_CoreTest", ThisKey="TestId", OtherKey="TestId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CoreTest CoreTest
		{
			get
			{
				return this._CoreTest.Entity;
			}
			set
			{
				CoreTest previousValue = this._CoreTest.Entity;
				if (((previousValue != value) 
							|| (this._CoreTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreTest.Entity = null;
						previousValue.TestGroups.Remove(this);
					}
					this._CoreTest.Entity = value;
					if ((value != null))
					{
						value.TestGroups.Add(this);
						this._TestId = value.TestId;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("CoreTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _SecondName;
		
		private string _Login;
		
		private string _Password;
		
		private short _UserRole;
		
		private short _Status;
		
		private bool _Sex;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _Email;
		
		private string _StudNumber;
		
		private string _AfinaId;
		
		private EntitySet<UserGroup> _UserGroups;
		
		private EntitySet<ActivationKey> _ActivationKeys;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSecondNameChanging(string value);
    partial void OnSecondNameChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserRoleChanging(short value);
    partial void OnUserRoleChanged();
    partial void OnStatusChanging(short value);
    partial void OnStatusChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnStudNumberChanging(string value);
    partial void OnStudNumberChanged();
    partial void OnAfinaIdChanging(string value);
    partial void OnAfinaIdChanged();
    #endregion
		
		public User()
		{
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			this._ActivationKeys = new EntitySet<ActivationKey>(new Action<ActivationKey>(this.attach_ActivationKeys), new Action<ActivationKey>(this.detach_ActivationKeys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondName", DbType="VarChar(150)")]
		public string SecondName
		{
			get
			{
				return this._SecondName;
			}
			set
			{
				if ((this._SecondName != value))
				{
					this.OnSecondNameChanging(value);
					this.SendPropertyChanging();
					this._SecondName = value;
					this.SendPropertyChanged("SecondName");
					this.OnSecondNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(150)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(150)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole", DbType="SmallInt NOT NULL")]
		public short UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				if ((this._UserRole != value))
				{
					this.OnUserRoleChanging(value);
					this.SendPropertyChanging();
					this._UserRole = value;
					this.SendPropertyChanged("UserRole");
					this.OnUserRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt NOT NULL")]
		public short Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudNumber", DbType="VarChar(50)")]
		public string StudNumber
		{
			get
			{
				return this._StudNumber;
			}
			set
			{
				if ((this._StudNumber != value))
				{
					this.OnStudNumberChanging(value);
					this.SendPropertyChanging();
					this._StudNumber = value;
					this.SendPropertyChanged("StudNumber");
					this.OnStudNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AfinaId", DbType="VarChar(50)")]
		public string AfinaId
		{
			get
			{
				return this._AfinaId;
			}
			set
			{
				if ((this._AfinaId != value))
				{
					this.OnAfinaIdChanging(value);
					this.SendPropertyChanging();
					this._AfinaId = value;
					this.SendPropertyChanged("AfinaId");
					this.OnAfinaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroup", Storage="_UserGroups", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ActivationKey", Storage="_ActivationKeys", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ActivationKey> ActivationKeys
		{
			get
			{
				return this._ActivationKeys;
			}
			set
			{
				this._ActivationKeys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ActivationKeys(ActivationKey entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ActivationKeys(ActivationKey entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSessionQuestions")]
	public partial class TestSessionQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestSessionQuestId;
		
		private short _QuestionIndex;
		
		private int _TestSessionId;
		
		private int _QuestionId;
		
		private string _Answer;
		
		private System.Nullable<bool> _IsRightAnswer;
		
		private EntityRef<CoreQuestion> _CoreQuestion;
		
		private EntityRef<TestSession> _TestSession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestSessionQuestIdChanging(int value);
    partial void OnTestSessionQuestIdChanged();
    partial void OnQuestionIndexChanging(short value);
    partial void OnQuestionIndexChanged();
    partial void OnTestSessionIdChanging(int value);
    partial void OnTestSessionIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnIsRightAnswerChanging(System.Nullable<bool> value);
    partial void OnIsRightAnswerChanged();
    #endregion
		
		public TestSessionQuestion()
		{
			this._CoreQuestion = default(EntityRef<CoreQuestion>);
			this._TestSession = default(EntityRef<TestSession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSessionQuestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestSessionQuestId
		{
			get
			{
				return this._TestSessionQuestId;
			}
			set
			{
				if ((this._TestSessionQuestId != value))
				{
					this.OnTestSessionQuestIdChanging(value);
					this.SendPropertyChanging();
					this._TestSessionQuestId = value;
					this.SendPropertyChanged("TestSessionQuestId");
					this.OnTestSessionQuestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionIndex", DbType="SmallInt NOT NULL")]
		public short QuestionIndex
		{
			get
			{
				return this._QuestionIndex;
			}
			set
			{
				if ((this._QuestionIndex != value))
				{
					this.OnQuestionIndexChanging(value);
					this.SendPropertyChanging();
					this._QuestionIndex = value;
					this.SendPropertyChanged("QuestionIndex");
					this.OnQuestionIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSessionId", DbType="Int NOT NULL")]
		public int TestSessionId
		{
			get
			{
				return this._TestSessionId;
			}
			set
			{
				if ((this._TestSessionId != value))
				{
					if (this._TestSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestSessionIdChanging(value);
					this.SendPropertyChanging();
					this._TestSessionId = value;
					this.SendPropertyChanged("TestSessionId");
					this.OnTestSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._CoreQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(MAX)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRightAnswer", DbType="Bit")]
		public System.Nullable<bool> IsRightAnswer
		{
			get
			{
				return this._IsRightAnswer;
			}
			set
			{
				if ((this._IsRightAnswer != value))
				{
					this.OnIsRightAnswerChanging(value);
					this.SendPropertyChanging();
					this._IsRightAnswer = value;
					this.SendPropertyChanged("IsRightAnswer");
					this.OnIsRightAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreQuestion_TestSessionQuestion", Storage="_CoreQuestion", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public CoreQuestion CoreQuestion
		{
			get
			{
				return this._CoreQuestion.Entity;
			}
			set
			{
				CoreQuestion previousValue = this._CoreQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CoreQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreQuestion.Entity = null;
						previousValue.TestSessionQuestions.Remove(this);
					}
					this._CoreQuestion.Entity = value;
					if ((value != null))
					{
						value.TestSessionQuestions.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("CoreQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSession_TestSessionQuestion", Storage="_TestSession", ThisKey="TestSessionId", OtherKey="TestSessionId", IsForeignKey=true)]
		public TestSession TestSession
		{
			get
			{
				return this._TestSession.Entity;
			}
			set
			{
				TestSession previousValue = this._TestSession.Entity;
				if (((previousValue != value) 
							|| (this._TestSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestSession.Entity = null;
						previousValue.TestSessionQuestions.Remove(this);
					}
					this._TestSession.Entity = value;
					if ((value != null))
					{
						value.TestSessionQuestions.Add(this);
						this._TestSessionId = value.TestSessionId;
					}
					else
					{
						this._TestSessionId = default(int);
					}
					this.SendPropertyChanged("TestSession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroups")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserGroupId;
		
		private int _UserId;
		
		private int _GroupId;
		
		private bool _IsAdministrator;
		
		private EntitySet<GroupTree> _GroupTrees;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIdChanging(int value);
    partial void OnUserGroupIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnIsAdministratorChanging(bool value);
    partial void OnIsAdministratorChanged();
    #endregion
		
		public UserGroup()
		{
			this._GroupTrees = new EntitySet<GroupTree>(new Action<GroupTree>(this.attach_GroupTrees), new Action<GroupTree>(this.detach_GroupTrees));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserGroupId
		{
			get
			{
				return this._UserGroupId;
			}
			set
			{
				if ((this._UserGroupId != value))
				{
					this.OnUserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._UserGroupId = value;
					this.SendPropertyChanged("UserGroupId");
					this.OnUserGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdministrator", DbType="Bit NOT NULL")]
		public bool IsAdministrator
		{
			get
			{
				return this._IsAdministrator;
			}
			set
			{
				if ((this._IsAdministrator != value))
				{
					this.OnIsAdministratorChanging(value);
					this.SendPropertyChanging();
					this._IsAdministrator = value;
					this.SendPropertyChanged("IsAdministrator");
					this.OnIsAdministratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_GroupTree", Storage="_GroupTrees", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<GroupTree> GroupTrees
		{
			get
			{
				return this._GroupTrees;
			}
			set
			{
				this._GroupTrees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroup", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupTrees(GroupTree entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_GroupTrees(GroupTree entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupTree")]
	public partial class GroupTree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _GroupName;
		
		private EntityRef<UserGroup> _UserGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public GroupTree()
		{
			this._UserGroup = default(EntityRef<UserGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_GroupTree", Storage="_UserGroup", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.GroupTrees.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.GroupTrees.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnonymousUsers")]
	public partial class AnonymousUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnonymousUserId;
		
		private System.DateTime _CreateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnonymousUserIdChanging(int value);
    partial void OnAnonymousUserIdChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public AnonymousUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnonymousUserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnonymousUserId
		{
			get
			{
				return this._AnonymousUserId;
			}
			set
			{
				if ((this._AnonymousUserId != value))
				{
					this.OnAnonymousUserIdChanging(value);
					this.SendPropertyChanging();
					this._AnonymousUserId = value;
					this.SendPropertyChanged("AnonymousUserId");
					this.OnAnonymousUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemSettings")]
	public partial class SystemSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropertyId;
		
		private string _PropertyName;
		
		private string _PropertyValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyIdChanging(int value);
    partial void OnPropertyIdChanged();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnPropertyValueChanging(string value);
    partial void OnPropertyValueChanged();
    #endregion
		
		public SystemSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					this.OnPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyId = value;
					this.SendPropertyChanged("PropertyId");
					this.OnPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValue", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PropertyValue
		{
			get
			{
				return this._PropertyValue;
			}
			set
			{
				if ((this._PropertyValue != value))
				{
					this.OnPropertyValueChanging(value);
					this.SendPropertyChanging();
					this._PropertyValue = value;
					this.SendPropertyChanged("PropertyValue");
					this.OnPropertyValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivationKeys")]
	public partial class ActivationKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivationKeyId;
		
		private int _UserId;
		
		private string _ActivationKey1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivationKeyIdChanging(int value);
    partial void OnActivationKeyIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnActivationKey1Changing(string value);
    partial void OnActivationKey1Changed();
    #endregion
		
		public ActivationKey()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivationKeyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActivationKeyId
		{
			get
			{
				return this._ActivationKeyId;
			}
			set
			{
				if ((this._ActivationKeyId != value))
				{
					this.OnActivationKeyIdChanging(value);
					this.SendPropertyChanging();
					this._ActivationKeyId = value;
					this.SendPropertyChanged("ActivationKeyId");
					this.OnActivationKeyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ActivationKey", Storage="_ActivationKey1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ActivationKey1
		{
			get
			{
				return this._ActivationKey1;
			}
			set
			{
				if ((this._ActivationKey1 != value))
				{
					this.OnActivationKey1Changing(value);
					this.SendPropertyChanging();
					this._ActivationKey1 = value;
					this.SendPropertyChanged("ActivationKey1");
					this.OnActivationKey1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ActivationKey", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ActivationKeys.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ActivationKeys.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoreAnswers")]
	public partial class CoreAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerId;
		
		private int _QuestionId;
		
		private string _Answer;
		
		private bool _IsTrue;
		
		private string _AnswerMetadata;
		
		private EntityRef<CoreQuestion> _CoreQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerIdChanging(int value);
    partial void OnAnswerIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnIsTrueChanging(bool value);
    partial void OnIsTrueChanged();
    partial void OnAnswerMetadataChanging(string value);
    partial void OnAnswerMetadataChanged();
    #endregion
		
		public CoreAnswer()
		{
			this._CoreQuestion = default(EntityRef<CoreQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnswerId
		{
			get
			{
				return this._AnswerId;
			}
			set
			{
				if ((this._AnswerId != value))
				{
					this.OnAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerId = value;
					this.SendPropertyChanged("AnswerId");
					this.OnAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._CoreQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTrue", DbType="Bit NOT NULL")]
		public bool IsTrue
		{
			get
			{
				return this._IsTrue;
			}
			set
			{
				if ((this._IsTrue != value))
				{
					this.OnIsTrueChanging(value);
					this.SendPropertyChanging();
					this._IsTrue = value;
					this.SendPropertyChanged("IsTrue");
					this.OnIsTrueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerMetadata", DbType="VarChar(MAX)")]
		public string AnswerMetadata
		{
			get
			{
				return this._AnswerMetadata;
			}
			set
			{
				if ((this._AnswerMetadata != value))
				{
					this.OnAnswerMetadataChanging(value);
					this.SendPropertyChanging();
					this._AnswerMetadata = value;
					this.SendPropertyChanged("AnswerMetadata");
					this.OnAnswerMetadataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreQuestion_CoreAnswer", Storage="_CoreQuestion", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CoreQuestion CoreQuestion
		{
			get
			{
				return this._CoreQuestion.Entity;
			}
			set
			{
				CoreQuestion previousValue = this._CoreQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CoreQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreQuestion.Entity = null;
						previousValue.CoreAnswers.Remove(this);
					}
					this._CoreQuestion.Entity = value;
					if ((value != null))
					{
						value.CoreAnswers.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("CoreQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoreQuestions")]
	public partial class CoreQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionId;
		
		private int _TestId;
		
		private byte _QuestionType;
		
		private string _Question;
		
		private double _QuestionMark;
		
		private string _QuestionMetadata;
		
		private EntitySet<CoreBLOB> _CoreBLOBs;
		
		private EntitySet<TestSessionQuestion> _TestSessionQuestions;
		
		private EntitySet<CoreAnswer> _CoreAnswers;
		
		private EntityRef<CoreTest> _CoreTest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnQuestionTypeChanging(byte value);
    partial void OnQuestionTypeChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnQuestionMarkChanging(double value);
    partial void OnQuestionMarkChanged();
    partial void OnQuestionMetadataChanging(string value);
    partial void OnQuestionMetadataChanged();
    #endregion
		
		public CoreQuestion()
		{
			this._CoreBLOBs = new EntitySet<CoreBLOB>(new Action<CoreBLOB>(this.attach_CoreBLOBs), new Action<CoreBLOB>(this.detach_CoreBLOBs));
			this._TestSessionQuestions = new EntitySet<TestSessionQuestion>(new Action<TestSessionQuestion>(this.attach_TestSessionQuestions), new Action<TestSessionQuestion>(this.detach_TestSessionQuestions));
			this._CoreAnswers = new EntitySet<CoreAnswer>(new Action<CoreAnswer>(this.attach_CoreAnswers), new Action<CoreAnswer>(this.detach_CoreAnswers));
			this._CoreTest = default(EntityRef<CoreTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL")]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._CoreTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="TinyInt NOT NULL")]
		public byte QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this.OnQuestionTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestionType = value;
					this.SendPropertyChanged("QuestionType");
					this.OnQuestionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionMark", DbType="Float NOT NULL")]
		public double QuestionMark
		{
			get
			{
				return this._QuestionMark;
			}
			set
			{
				if ((this._QuestionMark != value))
				{
					this.OnQuestionMarkChanging(value);
					this.SendPropertyChanging();
					this._QuestionMark = value;
					this.SendPropertyChanged("QuestionMark");
					this.OnQuestionMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionMetadata", DbType="VarChar(MAX)")]
		public string QuestionMetadata
		{
			get
			{
				return this._QuestionMetadata;
			}
			set
			{
				if ((this._QuestionMetadata != value))
				{
					this.OnQuestionMetadataChanging(value);
					this.SendPropertyChanging();
					this._QuestionMetadata = value;
					this.SendPropertyChanged("QuestionMetadata");
					this.OnQuestionMetadataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreQuestion_CoreBLOB", Storage="_CoreBLOBs", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<CoreBLOB> CoreBLOBs
		{
			get
			{
				return this._CoreBLOBs;
			}
			set
			{
				this._CoreBLOBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreQuestion_TestSessionQuestion", Storage="_TestSessionQuestions", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<TestSessionQuestion> TestSessionQuestions
		{
			get
			{
				return this._TestSessionQuestions;
			}
			set
			{
				this._TestSessionQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreQuestion_CoreAnswer", Storage="_CoreAnswers", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<CoreAnswer> CoreAnswers
		{
			get
			{
				return this._CoreAnswers;
			}
			set
			{
				this._CoreAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreQuestion", Storage="_CoreTest", ThisKey="TestId", OtherKey="TestId", IsForeignKey=true)]
		public CoreTest CoreTest
		{
			get
			{
				return this._CoreTest.Entity;
			}
			set
			{
				CoreTest previousValue = this._CoreTest.Entity;
				if (((previousValue != value) 
							|| (this._CoreTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreTest.Entity = null;
						previousValue.CoreQuestions.Remove(this);
					}
					this._CoreTest.Entity = value;
					if ((value != null))
					{
						value.CoreQuestions.Add(this);
						this._TestId = value.TestId;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("CoreTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CoreBLOBs(CoreBLOB entity)
		{
			this.SendPropertyChanging();
			entity.CoreQuestion = this;
		}
		
		private void detach_CoreBLOBs(CoreBLOB entity)
		{
			this.SendPropertyChanging();
			entity.CoreQuestion = null;
		}
		
		private void attach_TestSessionQuestions(TestSessionQuestion entity)
		{
			this.SendPropertyChanging();
			entity.CoreQuestion = this;
		}
		
		private void detach_TestSessionQuestions(TestSessionQuestion entity)
		{
			this.SendPropertyChanging();
			entity.CoreQuestion = null;
		}
		
		private void attach_CoreAnswers(CoreAnswer entity)
		{
			this.SendPropertyChanging();
			entity.CoreQuestion = this;
		}
		
		private void detach_CoreAnswers(CoreAnswer entity)
		{
			this.SendPropertyChanging();
			entity.CoreQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoreTests")]
	public partial class CoreTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestId;
		
		private string _TestName;
		
		private System.Guid _TestKey;
		
		private string _Description;
		
		private short _QuestionsNumber;
		
		private bool _VariantsMode;
		
		private short _PassagesNumber;
		
		private double _PassingScore;
		
		private int _TimeLimit;
		
		private System.DateTime _BeginTime;
		
		private System.DateTime _EndTime;
		
		private bool _AllowAdmitQuestions;
		
		private bool _ShowTestResult;
		
		private bool _ShowDetailsTestResult;
		
		private bool _ShowRightAnswersCount;
		
		private bool _IsActive;
		
		private bool _IsMasterTest;
		
		private short _AdaptiveMode;
		
		private bool _IsDeleted;
		
		private EntitySet<CoreMasterPart> _CoreMasterParts;
		
		private EntitySet<CoreMasterPart> _CoreMasterParts1;
		
		private EntitySet<CoreRequirement> _CoreRequirements;
		
		private EntitySet<CoreRequirement> _CoreRequirements1;
		
		private EntitySet<TestGroup> _TestGroups;
		
		private EntitySet<CoreQuestion> _CoreQuestions;
		
		private EntitySet<TestSession> _TestSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnTestNameChanging(string value);
    partial void OnTestNameChanged();
    partial void OnTestKeyChanging(System.Guid value);
    partial void OnTestKeyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuestionsNumberChanging(short value);
    partial void OnQuestionsNumberChanged();
    partial void OnVariantsModeChanging(bool value);
    partial void OnVariantsModeChanged();
    partial void OnPassagesNumberChanging(short value);
    partial void OnPassagesNumberChanged();
    partial void OnPassingScoreChanging(double value);
    partial void OnPassingScoreChanged();
    partial void OnTimeLimitChanging(int value);
    partial void OnTimeLimitChanged();
    partial void OnBeginTimeChanging(System.DateTime value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnAllowAdmitQuestionsChanging(bool value);
    partial void OnAllowAdmitQuestionsChanged();
    partial void OnShowTestResultChanging(bool value);
    partial void OnShowTestResultChanged();
    partial void OnShowDetailsTestResultChanging(bool value);
    partial void OnShowDetailsTestResultChanged();
    partial void OnShowRightAnswersCountChanging(bool value);
    partial void OnShowRightAnswersCountChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsMasterTestChanging(bool value);
    partial void OnIsMasterTestChanged();
    partial void OnAdaptiveModeChanging(short value);
    partial void OnAdaptiveModeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public CoreTest()
		{
			this._CoreMasterParts = new EntitySet<CoreMasterPart>(new Action<CoreMasterPart>(this.attach_CoreMasterParts), new Action<CoreMasterPart>(this.detach_CoreMasterParts));
			this._CoreMasterParts1 = new EntitySet<CoreMasterPart>(new Action<CoreMasterPart>(this.attach_CoreMasterParts1), new Action<CoreMasterPart>(this.detach_CoreMasterParts1));
			this._CoreRequirements = new EntitySet<CoreRequirement>(new Action<CoreRequirement>(this.attach_CoreRequirements), new Action<CoreRequirement>(this.detach_CoreRequirements));
			this._CoreRequirements1 = new EntitySet<CoreRequirement>(new Action<CoreRequirement>(this.attach_CoreRequirements1), new Action<CoreRequirement>(this.detach_CoreRequirements1));
			this._TestGroups = new EntitySet<TestGroup>(new Action<TestGroup>(this.attach_TestGroups), new Action<TestGroup>(this.detach_TestGroups));
			this._CoreQuestions = new EntitySet<CoreQuestion>(new Action<CoreQuestion>(this.attach_CoreQuestions), new Action<CoreQuestion>(this.detach_CoreQuestions));
			this._TestSessions = new EntitySet<TestSession>(new Action<TestSession>(this.attach_TestSessions), new Action<TestSession>(this.detach_TestSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this.OnTestNameChanging(value);
					this.SendPropertyChanging();
					this._TestName = value;
					this.SendPropertyChanged("TestName");
					this.OnTestNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TestKey
		{
			get
			{
				return this._TestKey;
			}
			set
			{
				if ((this._TestKey != value))
				{
					this.OnTestKeyChanging(value);
					this.SendPropertyChanging();
					this._TestKey = value;
					this.SendPropertyChanged("TestKey");
					this.OnTestKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionsNumber", DbType="SmallInt NOT NULL")]
		public short QuestionsNumber
		{
			get
			{
				return this._QuestionsNumber;
			}
			set
			{
				if ((this._QuestionsNumber != value))
				{
					this.OnQuestionsNumberChanging(value);
					this.SendPropertyChanging();
					this._QuestionsNumber = value;
					this.SendPropertyChanged("QuestionsNumber");
					this.OnQuestionsNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantsMode", DbType="Bit NOT NULL")]
		public bool VariantsMode
		{
			get
			{
				return this._VariantsMode;
			}
			set
			{
				if ((this._VariantsMode != value))
				{
					this.OnVariantsModeChanging(value);
					this.SendPropertyChanging();
					this._VariantsMode = value;
					this.SendPropertyChanged("VariantsMode");
					this.OnVariantsModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassagesNumber", DbType="SmallInt NOT NULL")]
		public short PassagesNumber
		{
			get
			{
				return this._PassagesNumber;
			}
			set
			{
				if ((this._PassagesNumber != value))
				{
					this.OnPassagesNumberChanging(value);
					this.SendPropertyChanging();
					this._PassagesNumber = value;
					this.SendPropertyChanged("PassagesNumber");
					this.OnPassagesNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassingScore", DbType="Float NOT NULL")]
		public double PassingScore
		{
			get
			{
				return this._PassingScore;
			}
			set
			{
				if ((this._PassingScore != value))
				{
					this.OnPassingScoreChanging(value);
					this.SendPropertyChanging();
					this._PassingScore = value;
					this.SendPropertyChanged("PassingScore");
					this.OnPassingScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLimit", DbType="Int NOT NULL")]
		public int TimeLimit
		{
			get
			{
				return this._TimeLimit;
			}
			set
			{
				if ((this._TimeLimit != value))
				{
					this.OnTimeLimitChanging(value);
					this.SendPropertyChanging();
					this._TimeLimit = value;
					this.SendPropertyChanged("TimeLimit");
					this.OnTimeLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowAdmitQuestions", DbType="Bit NOT NULL")]
		public bool AllowAdmitQuestions
		{
			get
			{
				return this._AllowAdmitQuestions;
			}
			set
			{
				if ((this._AllowAdmitQuestions != value))
				{
					this.OnAllowAdmitQuestionsChanging(value);
					this.SendPropertyChanging();
					this._AllowAdmitQuestions = value;
					this.SendPropertyChanged("AllowAdmitQuestions");
					this.OnAllowAdmitQuestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowTestResult", DbType="Bit NOT NULL")]
		public bool ShowTestResult
		{
			get
			{
				return this._ShowTestResult;
			}
			set
			{
				if ((this._ShowTestResult != value))
				{
					this.OnShowTestResultChanging(value);
					this.SendPropertyChanging();
					this._ShowTestResult = value;
					this.SendPropertyChanged("ShowTestResult");
					this.OnShowTestResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowDetailsTestResult", DbType="Bit NOT NULL")]
		public bool ShowDetailsTestResult
		{
			get
			{
				return this._ShowDetailsTestResult;
			}
			set
			{
				if ((this._ShowDetailsTestResult != value))
				{
					this.OnShowDetailsTestResultChanging(value);
					this.SendPropertyChanging();
					this._ShowDetailsTestResult = value;
					this.SendPropertyChanged("ShowDetailsTestResult");
					this.OnShowDetailsTestResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowRightAnswersCount", DbType="Bit NOT NULL")]
		public bool ShowRightAnswersCount
		{
			get
			{
				return this._ShowRightAnswersCount;
			}
			set
			{
				if ((this._ShowRightAnswersCount != value))
				{
					this.OnShowRightAnswersCountChanging(value);
					this.SendPropertyChanging();
					this._ShowRightAnswersCount = value;
					this.SendPropertyChanged("ShowRightAnswersCount");
					this.OnShowRightAnswersCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMasterTest", DbType="Bit NOT NULL")]
		public bool IsMasterTest
		{
			get
			{
				return this._IsMasterTest;
			}
			set
			{
				if ((this._IsMasterTest != value))
				{
					this.OnIsMasterTestChanging(value);
					this.SendPropertyChanging();
					this._IsMasterTest = value;
					this.SendPropertyChanged("IsMasterTest");
					this.OnIsMasterTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdaptiveMode", DbType="SmallInt NOT NULL")]
		public short AdaptiveMode
		{
			get
			{
				return this._AdaptiveMode;
			}
			set
			{
				if ((this._AdaptiveMode != value))
				{
					this.OnAdaptiveModeChanging(value);
					this.SendPropertyChanging();
					this._AdaptiveMode = value;
					this.SendPropertyChanged("AdaptiveMode");
					this.OnAdaptiveModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreMasterPart", Storage="_CoreMasterParts", ThisKey="TestId", OtherKey="PartTestId")]
		public EntitySet<CoreMasterPart> CoreMasterParts
		{
			get
			{
				return this._CoreMasterParts;
			}
			set
			{
				this._CoreMasterParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreMasterPart1", Storage="_CoreMasterParts1", ThisKey="TestId", OtherKey="MasterTestId")]
		public EntitySet<CoreMasterPart> CoreMasterParts1
		{
			get
			{
				return this._CoreMasterParts1;
			}
			set
			{
				this._CoreMasterParts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreRequirement", Storage="_CoreRequirements", ThisKey="TestId", OtherKey="TestId")]
		public EntitySet<CoreRequirement> CoreRequirements
		{
			get
			{
				return this._CoreRequirements;
			}
			set
			{
				this._CoreRequirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreRequirement1", Storage="_CoreRequirements1", ThisKey="TestId", OtherKey="Requirement")]
		public EntitySet<CoreRequirement> CoreRequirements1
		{
			get
			{
				return this._CoreRequirements1;
			}
			set
			{
				this._CoreRequirements1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_TestGroup", Storage="_TestGroups", ThisKey="TestId", OtherKey="TestId")]
		public EntitySet<TestGroup> TestGroups
		{
			get
			{
				return this._TestGroups;
			}
			set
			{
				this._TestGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_CoreQuestion", Storage="_CoreQuestions", ThisKey="TestId", OtherKey="TestId")]
		public EntitySet<CoreQuestion> CoreQuestions
		{
			get
			{
				return this._CoreQuestions;
			}
			set
			{
				this._CoreQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_TestSession", Storage="_TestSessions", ThisKey="TestId", OtherKey="TestId")]
		public EntitySet<TestSession> TestSessions
		{
			get
			{
				return this._TestSessions;
			}
			set
			{
				this._TestSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CoreMasterParts(CoreMasterPart entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = this;
		}
		
		private void detach_CoreMasterParts(CoreMasterPart entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = null;
		}
		
		private void attach_CoreMasterParts1(CoreMasterPart entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest1 = this;
		}
		
		private void detach_CoreMasterParts1(CoreMasterPart entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest1 = null;
		}
		
		private void attach_CoreRequirements(CoreRequirement entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = this;
		}
		
		private void detach_CoreRequirements(CoreRequirement entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = null;
		}
		
		private void attach_CoreRequirements1(CoreRequirement entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest1 = this;
		}
		
		private void detach_CoreRequirements1(CoreRequirement entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest1 = null;
		}
		
		private void attach_TestGroups(TestGroup entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = this;
		}
		
		private void detach_TestGroups(TestGroup entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = null;
		}
		
		private void attach_CoreQuestions(CoreQuestion entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = this;
		}
		
		private void detach_CoreQuestions(CoreQuestion entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = null;
		}
		
		private void attach_TestSessions(TestSession entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = this;
		}
		
		private void detach_TestSessions(TestSession entity)
		{
			this.SendPropertyChanging();
			entity.CoreTest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSessions")]
	public partial class TestSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestSessionId;
		
		private int _UserId;
		
		private int _TestId;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private double _MaxScore;
		
		private System.Nullable<double> _Score;
		
		private bool _IsPassed;
		
		private string _ClientIP;
		
		private string _UniqId;
		
		private System.Nullable<short> _AdditionalTime;
		
		private EntitySet<TestSessionQuestion> _TestSessionQuestions;
		
		private EntityRef<CoreTest> _CoreTest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestSessionIdChanging(int value);
    partial void OnTestSessionIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnMaxScoreChanging(double value);
    partial void OnMaxScoreChanged();
    partial void OnScoreChanging(System.Nullable<double> value);
    partial void OnScoreChanged();
    partial void OnIsPassedChanging(bool value);
    partial void OnIsPassedChanged();
    partial void OnClientIPChanging(string value);
    partial void OnClientIPChanged();
    partial void OnUniqIdChanging(string value);
    partial void OnUniqIdChanged();
    partial void OnAdditionalTimeChanging(System.Nullable<short> value);
    partial void OnAdditionalTimeChanged();
    #endregion
		
		public TestSession()
		{
			this._TestSessionQuestions = new EntitySet<TestSessionQuestion>(new Action<TestSessionQuestion>(this.attach_TestSessionQuestions), new Action<TestSessionQuestion>(this.detach_TestSessionQuestions));
			this._CoreTest = default(EntityRef<CoreTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSessionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestSessionId
		{
			get
			{
				return this._TestSessionId;
			}
			set
			{
				if ((this._TestSessionId != value))
				{
					this.OnTestSessionIdChanging(value);
					this.SendPropertyChanging();
					this._TestSessionId = value;
					this.SendPropertyChanged("TestSessionId");
					this.OnTestSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL")]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._CoreTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxScore", DbType="Float NOT NULL")]
		public double MaxScore
		{
			get
			{
				return this._MaxScore;
			}
			set
			{
				if ((this._MaxScore != value))
				{
					this.OnMaxScoreChanging(value);
					this.SendPropertyChanging();
					this._MaxScore = value;
					this.SendPropertyChanged("MaxScore");
					this.OnMaxScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Float")]
		public System.Nullable<double> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPassed", DbType="Bit NOT NULL")]
		public bool IsPassed
		{
			get
			{
				return this._IsPassed;
			}
			set
			{
				if ((this._IsPassed != value))
				{
					this.OnIsPassedChanging(value);
					this.SendPropertyChanging();
					this._IsPassed = value;
					this.SendPropertyChanged("IsPassed");
					this.OnIsPassedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientIP", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ClientIP
		{
			get
			{
				return this._ClientIP;
			}
			set
			{
				if ((this._ClientIP != value))
				{
					this.OnClientIPChanging(value);
					this.SendPropertyChanging();
					this._ClientIP = value;
					this.SendPropertyChanged("ClientIP");
					this.OnClientIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqId", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string UniqId
		{
			get
			{
				return this._UniqId;
			}
			set
			{
				if ((this._UniqId != value))
				{
					this.OnUniqIdChanging(value);
					this.SendPropertyChanging();
					this._UniqId = value;
					this.SendPropertyChanged("UniqId");
					this.OnUniqIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalTime", DbType="SmallInt")]
		public System.Nullable<short> AdditionalTime
		{
			get
			{
				return this._AdditionalTime;
			}
			set
			{
				if ((this._AdditionalTime != value))
				{
					this.OnAdditionalTimeChanging(value);
					this.SendPropertyChanging();
					this._AdditionalTime = value;
					this.SendPropertyChanged("AdditionalTime");
					this.OnAdditionalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSession_TestSessionQuestion", Storage="_TestSessionQuestions", ThisKey="TestSessionId", OtherKey="TestSessionId")]
		public EntitySet<TestSessionQuestion> TestSessionQuestions
		{
			get
			{
				return this._TestSessionQuestions;
			}
			set
			{
				this._TestSessionQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoreTest_TestSession", Storage="_CoreTest", ThisKey="TestId", OtherKey="TestId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CoreTest CoreTest
		{
			get
			{
				return this._CoreTest.Entity;
			}
			set
			{
				CoreTest previousValue = this._CoreTest.Entity;
				if (((previousValue != value) 
							|| (this._CoreTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoreTest.Entity = null;
						previousValue.TestSessions.Remove(this);
					}
					this._CoreTest.Entity = value;
					if ((value != null))
					{
						value.TestSessions.Add(this);
						this._TestId = value.TestId;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("CoreTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestSessionQuestions(TestSessionQuestion entity)
		{
			this.SendPropertyChanging();
			entity.TestSession = this;
		}
		
		private void detach_TestSessionQuestions(TestSessionQuestion entity)
		{
			this.SendPropertyChanging();
			entity.TestSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemEventsLog")]
	public partial class SystemEventsLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private System.DateTime _EventTime;
		
		private short _EventCode;
		
		private string _Login;
		
		private string _EventText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnEventCodeChanging(short value);
    partial void OnEventCodeChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnEventTextChanging(string value);
    partial void OnEventTextChanged();
    #endregion
		
		public SystemEventsLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCode", DbType="SmallInt NOT NULL")]
		public short EventCode
		{
			get
			{
				return this._EventCode;
			}
			set
			{
				if ((this._EventCode != value))
				{
					this.OnEventCodeChanging(value);
					this.SendPropertyChanging();
					this._EventCode = value;
					this.SendPropertyChanged("EventCode");
					this.OnEventCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EventText
		{
			get
			{
				return this._EventText;
			}
			set
			{
				if ((this._EventText != value))
				{
					this.OnEventTextChanging(value);
					this.SendPropertyChanging();
					this._EventText = value;
					this.SendPropertyChanged("EventText");
					this.OnEventTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetUserGroupsResult
	{
		
		private int _GroupId;
		
		private string _GroupName;
		
		private bool _IsAdministrator;
		
		public GetUserGroupsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdministrator", DbType="Bit NOT NULL")]
		public bool IsAdministrator
		{
			get
			{
				return this._IsAdministrator;
			}
			set
			{
				if ((this._IsAdministrator != value))
				{
					this._IsAdministrator = value;
				}
			}
		}
	}
	
	public partial class GetTestRequirementsResult
	{
		
		private int _Requirement;
		
		private int _NodeId;
		
		private string _TestName;
		
		public GetTestRequirementsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Requirement", DbType="Int NOT NULL")]
		public int Requirement
		{
			get
			{
				return this._Requirement;
			}
			set
			{
				if ((this._Requirement != value))
				{
					this._Requirement = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", DbType="Int NOT NULL")]
		public int NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					this._NodeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this._TestName = value;
				}
			}
		}
	}
	
	public partial class GetUserGroupTreeResult
	{
		
		private int _GroupId;
		
		private string _GroupNode;
		
		private string _GroupName;
		
		private string _GroupCode;
		
		public GetUserGroupTreeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupNode", DbType="NVarChar(4000)")]
		public string GroupNode
		{
			get
			{
				return this._GroupNode;
			}
			set
			{
				if ((this._GroupNode != value))
				{
					this._GroupNode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupCode
		{
			get
			{
				return this._GroupCode;
			}
			set
			{
				if ((this._GroupCode != value))
				{
					this._GroupCode = value;
				}
			}
		}
	}
	
	public partial class GetAppointedTestsResult
	{
		
		private int _NodeId;
		
		private string _TestName;
		
		private System.Nullable<int> _PassedCount;
		
		public GetAppointedTestsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", DbType="Int NOT NULL")]
		public int NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					this._NodeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this._TestName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassedCount", DbType="Int")]
		public System.Nullable<int> PassedCount
		{
			get
			{
				return this._PassedCount;
			}
			set
			{
				if ((this._PassedCount != value))
				{
					this._PassedCount = value;
				}
			}
		}
	}
	
	public partial class GetTestTreeByLevelResult
	{
		
		private int _NodeId;
		
		private byte _NodeType;
		
		private string _TreeNode;
		
		private System.Nullable<int> _TestId;
		
		private string _TestName;
		
		private System.Nullable<int> _ItemOwner;
		
		private bool _TestTreeIsActive;
		
		public GetTestTreeByLevelResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", DbType="Int NOT NULL")]
		public int NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					this._NodeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeType", DbType="TinyInt NOT NULL")]
		public byte NodeType
		{
			get
			{
				return this._NodeType;
			}
			set
			{
				if ((this._NodeType != value))
				{
					this._NodeType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreeNode", DbType="NVarChar(4000)")]
		public string TreeNode
		{
			get
			{
				return this._TreeNode;
			}
			set
			{
				if ((this._TreeNode != value))
				{
					this._TreeNode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int")]
		public System.Nullable<int> TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					this._TestId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestName", DbType="VarChar(150)")]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this._TestName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemOwner", DbType="Int")]
		public System.Nullable<int> ItemOwner
		{
			get
			{
				return this._ItemOwner;
			}
			set
			{
				if ((this._ItemOwner != value))
				{
					this._ItemOwner = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestTreeIsActive", DbType="Bit NOT NULL")]
		public bool TestTreeIsActive
		{
			get
			{
				return this._TestTreeIsActive;
			}
			set
			{
				if ((this._TestTreeIsActive != value))
				{
					this._TestTreeIsActive = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
